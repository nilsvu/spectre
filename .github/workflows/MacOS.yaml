# Distributed under the MIT License.
# See LICENSE.txt for details.

# Build and test the code natively on macOS
name: MacOS

on:
  workflow_call:

jobs:
  unit_tests_macos:
    name: Unit tests on macOS
    runs-on: macos-11
    env:
      # We install some low-level dependencies with Homebrew. They get picked up
      # by `spack external find`.
      SPECTRE_BREW_DEPS: >-  # Line breaks are spaces, no trailing newline
        autoconf automake catch2 ccache cmake pkg-config
      # We install these packages with Spack and cache them. The full specs are
      # listed in support/DevEnvironments/spack.yaml. This list is only needed
      # to create the cache.
      SPECTRE_SPACK_DEPS: >-
        blaze boost brigand charmpp gsl hdf5 libsharp libxsmm openblas
        py-pybind11 yaml-cpp
      CCACHE_DIR: $HOME/ccache
      CCACHE_TEMPDIR: $HOME/ccache-tmp
      CCACHE_MAXSIZE: "2G"
      CCACHE_COMPRESS: 1
      CCACHE_COMPRESSLEVEL: 5
      CCACHE_COMPILERCHECK: content
      SPACK_SKIP_MODULES: true
      SPACK_COLOR: always
    steps:
      - name: Record start time
        id: start
        run: |
          echo "time=$(date +%s)" >> "$GITHUB_OUTPUT"
      - name: Checkout repository
        uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Install Homebrew dependencies
        run: |
          brew install $SPECTRE_BREW_DEPS
      # We install the remaining dependencies with Spack and cache them.
      # See the `unit_tests` job above for details on the cache configuration.
      - name: Restore dependency cache
        uses: actions/cache/restore@v3
        id: restore-dependencies
        with:
          path: ~/dependencies
          key: "dependencies-macos-${{ github.run_id }}"
          restore-keys: |
            dependencies-macos-
      - name: Install Spack
        run: |
          cd $HOME
          git clone -c feature.manyFiles=true --depth=1 \
            --branch releases/v0.18 --single-branch \
            https://github.com/spack/spack.git
      - name: Configure Spack
        # - To avoid re-building packages that are already installed by Homebrew
        #   we let Spack find them.
        # - Add the dependency cache as binary mirror.
        run: |
          source $HOME/spack/share/spack/setup-env.sh
          spack debug report
          spack compiler find && spack compiler list
          spack external find && spack external find perl python
          spack config get packages
          spack mirror add dependencies file://$HOME/dependencies/spack
      # Install the remaining dependencies from source with Spack. We install
      # them in an environment that we can activate later. After building the
      # dependencies from source we cache them as compressed tarballs.
      - name: Install Spack dependencies
        run: |
          source $HOME/spack/share/spack/setup-env.sh
          spack env create spectre support/DevEnvironments/spack.yaml
          spack env activate spectre
          spack remove catch2 doxygen jemalloc
          spack concretize --reuse
          spack install --no-check-signature
          spack find -v
      - name: Update dependency cache
        if: github.ref == 'refs/heads/develop'
        run: |
          source $HOME/spack/share/spack/setup-env.sh
          # Clear existing buildcache so we don't accumulate old versions of
          # packages in the cache
          rm -rf $HOME/dependencies
          spack buildcache create -ufa -m dependencies $SPECTRE_SPACK_DEPS
        # Allow the buildcache creation to fail without failing the job, since
        # it sometimes runs out of memory
        continue-on-error: true
      - name: Save dependency cache
        if: github.ref == 'refs/heads/develop'
        uses: actions/cache/save@v3
        with:
          path: ~/dependencies
          key: ${{ steps.restore-dependencies.outputs.cache-primary-key }}
      # Install remaining pure Python dependencies with pip because the Spack
      # package index can be incomplete (it can't mirror all of pip)
      - name: Install Python dependencies
        run: |
          source $HOME/spack/share/spack/setup-env.sh
          spack env activate spectre
          pip install -r support/Python/requirements.txt
      # Replace the ccache directory that building the dependencies may have
      # generated with the cached ccache directory.
      - name: Clear ccache from dependencies
        run: |
          ccache --clear
          rm -rf $CCACHE_DIR
          mkdir -p $CCACHE_DIR
      - name: Restore ccache
        uses: actions/cache/restore@v3
        id: restore-ccache
        with:
          path: ~/ccache
          key: "ccache-macos-${{ github.run_id }}"
          restore-keys: |
            ccache-macos-
      - name: Configure ccache
        run: |
          ccache -pz
      - name: Clear ccache
        # Clear ccache if requested
        if: >
          github.event_name == 'workflow_dispatch'
            && github.event.inputs.clear_ccache == 'yes'
        run: |
          ccache -C
      # Configure, build and run tests. See the `unit_tests` job above for
      # details.
      # - We increase the timeout for tests because the GitHub-hosted macOS VMs
      #   appear to be quite slow.
      - name: Configure build with cmake
        run: |
          source $HOME/spack/share/spack/setup-env.sh
          spack env activate spectre
          mkdir build && cd build
          cmake \
            -D CMAKE_C_COMPILER=clang \
            -D CMAKE_CXX_COMPILER=clang++ \
            -D CMAKE_Fortran_COMPILER=gfortran-11 \
            -D CMAKE_CXX_FLAGS="-Werror" \
            -D OVERRIDE_ARCH=x86-64 \
            -D BUILD_SHARED_LIBS=ON \
            -D BUILD_PYTHON_BINDINGS=ON \
            -D MEMORY_ALLOCATOR=SYSTEM \
            -D CHARM_ROOT=$(spack location --install-dir charmpp) \
            -D CMAKE_BUILD_TYPE=Debug \
            -D DEBUG_SYMBOLS=OFF \
            -D UNIT_TESTS_IN_TEST_EXECUTABLES=OFF \
            -D STUB_EXECUTABLE_OBJECT_FILES=ON \
            -D STUB_LIBRARY_OBJECT_FILES=ON \
            -D USE_PCH=ON \
            -D USE_CCACHE=ON \
            -D SPECTRE_TEST_TIMEOUT_FACTOR=5 \
            -D CMAKE_INSTALL_PREFIX=../install \
            -D BUILD_DOCS=OFF \
            -D USE_XSIMD=OFF \
            $GITHUB_WORKSPACE
      - name: Build unit tests
        working-directory: build
        # Build on 3 threads because GitHub's macOS VMs have 3 cores:
        # https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners#supported-runners-and-hardware-resources
        run: |
          make -j3 unit-tests
      - name: Build executables
        working-directory: build
        run: |
          make test-executables
      - name: Clean up ccache
        if: github.ref == 'refs/heads/develop'
        run: |
          now=$(date +%s)
          job_duration=$((now - ${{ steps.start.outputs.time }}))
          ccache --evict-older-than "${job_duration}s"
      - name: Save ccache
        if: always() && github.ref == 'refs/heads/develop'
        uses: actions/cache/save@v3
        with:
          path: ~/ccache
          key: ${{ steps.restore-ccache.outputs.cache-primary-key }}
      - name: Print size of build directory
        working-directory: build
        run: |
          ls | xargs du -sh
          du -sh .
      - name: Diagnose ccache
        run: |
          ccache -s
      - name: Run unit tests
        working-directory: build
        run: |
          ctest -j3 --repeat after-timeout:3 --output-on-failure
      - name: Install
        working-directory: build
        run: |
          make install
      - name: Print size of install directory
        working-directory: install
        run: |
          ls | xargs du -sh
          du -sh .
          rm -r ./*
